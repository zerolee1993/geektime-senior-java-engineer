{"./":{"url":"./","title":"大纲","keywords":"","body":"大纲 Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-26 14:38:36 "},"markdown/00-homework/pref-task.html":{"url":"markdown/00-homework/pref-task.html","title":"项目性能优化 TODO","keywords":"","body":"项目性能测试报告 01-测试目的 主要是让开发者对hero_mall项目的性能负载和容量有个准确的认知。同时，协助技术管理者更好的管 理业务系统性能质量，科学评估业务系统的负荷，拒绝盲目上线。 02-测试工具 03-测试环境 04-测试场景 05-核心接口的测试结果 06-测试结论 hero_web性能测试是针对重点功能，单机单节点服务进行压测，可以看到各个接口容量。本测试供给大 家作为参考，如有不足或偏差，请指正！如果对性能有其他需求，可以进行集群扩容。例如:3节点、10 节点、100节点... 地址：https://open2.hero.comvipcourse/order/{orderNo}1 Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-11 00:15:03 "},"markdown/00-homework/jvm-task.html":{"url":"markdown/00-homework/jvm-task.html","title":"JVM 虚拟机 TODO","keywords":"","body":"题目 01 请你用自己的语言介绍 Java 运行时数据区（内存区域） 堆、虚拟机栈、本地方法栈、方法区（永久代、元空间）、运行时常量池（字符串常量池）、直接内存 堆 在虚拟机启动时建立，用于存放 Java 对象、数组与运行时常量 所有线程共享 虚拟机管理最大的，也是垃圾回收的主要区域 2. 为什么堆内存要分年轻代和老年代？ 题目 02 描述一个 Java 对象的生命周期 解释一个对象的创建过程 解释一个对象的内存分配 解释一个对象的销毁过程 对象的 2 种访问方式是什么？ 为什么需要内存担保？ 题目 03 垃圾收集算法有哪些？垃圾收集器有哪些？他们的特点是什么？ ParNew 收集器 ParallelScavenge 收集器 ParallelOld 收集器 CMS 收集器 G1 收集器 Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-22 16:25:38 "},"markdown/01-java/pref.html":{"url":"markdown/01-java/pref.html","title":"项目性能优化","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-10 23:42:17 "},"markdown/01-java/jvm.html":{"url":"markdown/01-java/jvm.html","title":"JVM 虚拟机","keywords":"","body":" JVM基本常识 什么是 JVM Java 技术体系 JVM 架构图 Java 和 JVM 的关系 类加载子系统 类加载的时机 类加载的过程 类加载器 类加载的机制 运行时数据区 整体构成 虚拟机栈 本地方法栈 程序计数器 堆 方法区 字符串常量池 直接内存 对象的创建流程 与内存分配 整体过程 对象内存分配的方式 对象内存分配的安全问题 对象内存分配的过程 对象的内存布局 对象的访问 垃圾收集器 垃圾的定义 不可达对象，通过根对象进行引用搜索，最终没有被引用到的对象 垃圾定位算法 引用计数法 无法解决循环依赖的问题 根可达算法 通过 GCRoots 作为对象起点向下搜索，当一个对象到 GCRoots 没有任何引用链是，此对象是垃圾 引用链 ReferenceChain：GCRoots 走过的路径 GCRoots 虚拟机栈的栈帧中的本地变量表引用的对象 方法区中，类静态属性引用的对象 方法区中，常量引用的对象 本地方法栈中，JNI 引用的对象 虚拟机内部的引用 垃圾回收过程 第一次标记:如果对象可达性分析后，发现没有与GC Roots 相连接的引用链，那它将会被第一次标记 第二次标记:第一次标记后，接着会进行一次筛选。筛选条件:此对象是否有必要执行 finalize() 方法。在 finalize() 方法中没有重新与引用链建立关联关系的，将被进行第二次标记 第二次标记成功的对象将真的会被回收，如果失败则继续存活 案例 对象引用类型 引用分类 使用方式 案例 垃圾回收算法 复制算法 Copying 存在空间的浪费 标记清除算法 Mark-Sweep 执行效率不稳定 产生大量空间碎片 标记整理算法 Mark-Compact 垃圾收集器 串行收集器 并行收集器 JVM调优工具 调优实战 推荐资料 《Java 虚拟机规范 周志明》 课程大纲 JVM基本常识 程序执行方式 JVM整体架构 JVM5大数据区 JVM加载机制剖析 Class类 类加载子系统 类加载器 双亲委派 自定义类加载器 ClassLoader源码分析 垃圾回收算法 Parallel、Serial、CMS、G1、ZGC 垃圾收集器剖析 JVM核心参数 JVM常用指令 jps、jstat、jinfo、jhat、jmap JVM调优工具 VisualVM、GC Easy、PerfMa、MAT GC日志分析 GC日志分析工具 Minor GC、Major GC和Full GC 内存溢出与泄露案例 检测死锁案例 JVM调优实战 堆内存和元空间优化、堆栈优化、吞吐量优先策略、响应时间优先策略 Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-24 20:02:07 "},"markdown/01-java/jvm-01.html":{"url":"markdown/01-java/jvm-01.html","title":"1.JVM 基本常识","keywords":"","body":"1. JVM 基本常识 1.1 什么是 JVM? 广义上指的是一种规范 狭义上的是JDK中的JVM虚拟机 JVM 是由各个厂商来实现，比如hotspot 1.2 Java 技术体系 Java程序设计语言 Java类库API 来自商业机构和开源社区的第三方Java类库(Google\\Apached等) Java虚拟机，各种硬件平台上的Java虚拟机实现 1.3 JVM 架构图 1.4 Java 和 JVM 的关系 JVM是宿主，Java 开发的程序则寄生在宿主上 Java，Kotlin、Clojure、JRuby、Groovy等运行于Java虚拟机上的编程语言及其相关的程序都属于Java技术体系中的一员 Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-24 19:56:39 "},"markdown/01-java/concurrent.html":{"url":"markdown/01-java/concurrent.html","title":"多线程与并发编程","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-10 23:42:33 "},"markdown/01-java/socket.html":{"url":"markdown/01-java/socket.html","title":"网络编程","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-10 23:42:36 "},"markdown/02-database/mysql.html":{"url":"markdown/02-database/mysql.html","title":"MySQL 进阶","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-26 14:56:42 "},"markdown/02-database/store.html":{"url":"markdown/02-database/store.html","title":"海量数据存储与优化","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-26 14:56:57 "},"markdown/02-database/mongodb.html":{"url":"markdown/02-database/mongodb.html","title":"MongoDB","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-26 14:57:49 "},"markdown/02-database/fastdfs.html":{"url":"markdown/02-database/fastdfs.html","title":"FastDFS","keywords":"","body":"Copyright © zerolee 2022 all right reserved，powered by Gitbook修订时间： 2022-09-26 14:56:50 "}}